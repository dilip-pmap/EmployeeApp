'use strict';

exports.__esModule = true;

var _uniqueid = require('uniqueid');

var _uniqueid2 = _interopRequireDefault(_uniqueid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Actions
                                                                                                                                                           *
                                                                                                                                                           * Instances of the Actions class represent a set of actions. (In Flux parlance,
                                                                                                                                                           * these might be more accurately denoted as Action Creators, while Action
                                                                                                                                                           * refers to the payload sent to the dispatcher, but this is... confusing. We
                                                                                                                                                           * will use Action to mean the function you call to trigger a dispatch.)
                                                                                                                                                           *
                                                                                                                                                           * Create actions by extending from the base Actions class and adding methods.
                                                                                                                                                           * All methods on the prototype (except the constructor) will be
                                                                                                                                                           * converted into actions. The return value of an action is used as the body
                                                                                                                                                           * of the payload sent to the dispatcher.
                                                                                                                                                           */

var Actions = (function () {
  function Actions() {
    _classCallCheck(this, Actions);

    this._baseId = (0, _uniqueid2.default)();

    var methodNames = this._getActionMethodNames();
    for (var i = 0; i < methodNames.length; i++) {
      var methodName = methodNames[i];
      this._wrapAction(methodName);
    }

    this.getConstants = this.getActionIds;
  }

  Actions.prototype.getActionIds = function getActionIds() {
    var _this = this;

    return this._getActionMethodNames().reduce(function (result, actionName) {
      result[actionName] = _this[actionName]._id;
      return result;
    }, {});
  };

  Actions.prototype._getActionMethodNames = function _getActionMethodNames(instance) {
    var _this2 = this;

    return Object.getOwnPropertyNames(this.constructor.prototype).filter(function (name) {
      return name !== 'constructor' && typeof _this2[name] === 'function';
    });
  };

  Actions.prototype._wrapAction = function _wrapAction(methodName) {
    var _this3 = this;

    var originalMethod = this[methodName];
    var actionId = this._createActionId(methodName);

    var action = function action() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var body = originalMethod.apply(_this3, args);

      if (isPromise(body)) {
        var promise = body;
        _this3._dispatchAsync(actionId, promise, args, methodName);
      } else {
        _this3._dispatch(actionId, body, args, methodName);
      }

      // Return original method's return value to caller
      return body;
    };

    action._id = actionId;

    this[methodName] = action;
  };

  /**
   * Create unique string constant for an action method, using
   * @param {string} methodName - Name of the action method
   */

  Actions.prototype._createActionId = function _createActionId(methodName) {
    return this._baseId + '-' + methodName;
  };

  Actions.prototype._dispatch = function _dispatch(actionId, body, args, methodName) {
    if (typeof this.dispatch === 'function') {
      if (typeof body !== 'undefined') {
        this.dispatch(actionId, body, args);
      }
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.warn('You\'ve attempted to perform the action ' + (this.constructor.name + '#' + methodName + ', but it hasn\'t been added ') + 'to a Flux instance.');
      }
    }

    return body;
  };

  Actions.prototype._dispatchAsync = function _dispatchAsync(actionId, promise, args, methodName) {
    if (typeof this.dispatchAsync === 'function') {
      this.dispatchAsync(actionId, promise, args);
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.warn('You\'ve attempted to perform the asynchronous action ' + (this.constructor.name + '#' + methodName + ', but it hasn\'t been added ') + 'to a Flux instance.');
      }
    }
  };

  return Actions;
})();

exports.default = Actions;

function isPromise(value) {
  return value && typeof value.then === 'function';
}
//# sourceMappingURL=data:application/json;base64,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Q0wsVUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQUU7QUFDekMsZUFBTyxDQUFDLElBQUksQ0FDViw4Q0FDRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksU0FBSSxVQUFVLGtDQUE2Qix3QkFDOUMsQ0FDdEIsQ0FBQztPQUNIO0tBQ0Y7O0FBRUQsV0FBTyxJQUFJLENBQUM7R0FDYjs7QUE3RWtCLFNBQU8sV0ErRTFCLGNBQWMsMkJBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0FBQ2xELFFBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFVBQVUsRUFBRTtBQUM1QyxVQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDN0MsTUFBTTtBQUNMLFVBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxFQUFFO0FBQ3pDLGVBQU8sQ0FBQyxJQUFJLENBQ1YsMkRBQ0csSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFNBQUksVUFBVSxrQ0FBNkIsd0JBQzlDLENBQ3RCLENBQUM7T0FDSDtLQUNGO0dBQ0Y7O1NBM0ZrQixPQUFPOzs7a0JBQVAsT0FBTzs7QUErRjVCLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtBQUN4QixTQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0NBQ2xEIiwiZmlsZSI6IkFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFjdGlvbnNcbiAqXG4gKiBJbnN0YW5jZXMgb2YgdGhlIEFjdGlvbnMgY2xhc3MgcmVwcmVzZW50IGEgc2V0IG9mIGFjdGlvbnMuIChJbiBGbHV4IHBhcmxhbmNlLFxuICogdGhlc2UgbWlnaHQgYmUgbW9yZSBhY2N1cmF0ZWx5IGRlbm90ZWQgYXMgQWN0aW9uIENyZWF0b3JzLCB3aGlsZSBBY3Rpb25cbiAqIHJlZmVycyB0byB0aGUgcGF5bG9hZCBzZW50IHRvIHRoZSBkaXNwYXRjaGVyLCBidXQgdGhpcyBpcy4uLiBjb25mdXNpbmcuIFdlXG4gKiB3aWxsIHVzZSBBY3Rpb24gdG8gbWVhbiB0aGUgZnVuY3Rpb24geW91IGNhbGwgdG8gdHJpZ2dlciBhIGRpc3BhdGNoLilcbiAqXG4gKiBDcmVhdGUgYWN0aW9ucyBieSBleHRlbmRpbmcgZnJvbSB0aGUgYmFzZSBBY3Rpb25zIGNsYXNzIGFuZCBhZGRpbmcgbWV0aG9kcy5cbiAqIEFsbCBtZXRob2RzIG9uIHRoZSBwcm90b3R5cGUgKGV4Y2VwdCB0aGUgY29uc3RydWN0b3IpIHdpbGwgYmVcbiAqIGNvbnZlcnRlZCBpbnRvIGFjdGlvbnMuIFRoZSByZXR1cm4gdmFsdWUgb2YgYW4gYWN0aW9uIGlzIHVzZWQgYXMgdGhlIGJvZHlcbiAqIG9mIHRoZSBwYXlsb2FkIHNlbnQgdG8gdGhlIGRpc3BhdGNoZXIuXG4gKi9cblxuaW1wb3J0IHVuaXF1ZUlkIGZyb20gJ3VuaXF1ZWlkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9ucyB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLl9iYXNlSWQgPSB1bmlxdWVJZCgpO1xuXG4gICAgY29uc3QgbWV0aG9kTmFtZXMgPSB0aGlzLl9nZXRBY3Rpb25NZXRob2ROYW1lcygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcbiAgICAgIHRoaXMuX3dyYXBBY3Rpb24obWV0aG9kTmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRDb25zdGFudHMgPSB0aGlzLmdldEFjdGlvbklkcztcbiAgfVxuXG4gIGdldEFjdGlvbklkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0QWN0aW9uTWV0aG9kTmFtZXMoKS5yZWR1Y2UoKHJlc3VsdCwgYWN0aW9uTmFtZSkgPT4ge1xuICAgICAgcmVzdWx0W2FjdGlvbk5hbWVdID0gdGhpc1thY3Rpb25OYW1lXS5faWQ7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIF9nZXRBY3Rpb25NZXRob2ROYW1lcyhpbnN0YW5jZSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSlcbiAgICAgIC5maWx0ZXIobmFtZSA9PlxuICAgICAgICBuYW1lICE9PSAnY29uc3RydWN0b3InICYmXG4gICAgICAgIHR5cGVvZiB0aGlzW25hbWVdID09PSAnZnVuY3Rpb24nXG4gICAgICApO1xuICB9XG5cbiAgX3dyYXBBY3Rpb24obWV0aG9kTmFtZSkge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gdGhpc1ttZXRob2ROYW1lXTtcbiAgICBjb25zdCBhY3Rpb25JZCA9IHRoaXMuX2NyZWF0ZUFjdGlvbklkKG1ldGhvZE5hbWUpO1xuXG4gICAgY29uc3QgYWN0aW9uID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IGJvZHkgPSBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgICAgaWYgKGlzUHJvbWlzZShib2R5KSkge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gYm9keTtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hBc3luYyhhY3Rpb25JZCwgcHJvbWlzZSwgYXJncywgbWV0aG9kTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9kaXNwYXRjaChhY3Rpb25JZCwgYm9keSwgYXJncywgbWV0aG9kTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBvcmlnaW5hbCBtZXRob2QncyByZXR1cm4gdmFsdWUgdG8gY2FsbGVyXG4gICAgICByZXR1cm4gYm9keTtcbiAgICB9O1xuXG4gICAgYWN0aW9uLl9pZCA9IGFjdGlvbklkO1xuXG4gICAgdGhpc1ttZXRob2ROYW1lXSA9IGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdW5pcXVlIHN0cmluZyBjb25zdGFudCBmb3IgYW4gYWN0aW9uIG1ldGhvZCwgdXNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBOYW1lIG9mIHRoZSBhY3Rpb24gbWV0aG9kXG4gICAqL1xuICBfY3JlYXRlQWN0aW9uSWQobWV0aG9kTmFtZSkge1xuICAgIHJldHVybiBgJHt0aGlzLl9iYXNlSWR9LSR7bWV0aG9kTmFtZX1gO1xuICB9XG5cbiAgX2Rpc3BhdGNoKGFjdGlvbklkLCBib2R5LCBhcmdzLCBtZXRob2ROYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmRpc3BhdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goYWN0aW9uSWQsIGJvZHksIGFyZ3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFlvdSd2ZSBhdHRlbXB0ZWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGBcbiAgICAgICAgKyBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IyR7bWV0aG9kTmFtZX0sIGJ1dCBpdCBoYXNuJ3QgYmVlbiBhZGRlZCBgXG4gICAgICAgICsgYHRvIGEgRmx1eCBpbnN0YW5jZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvZHk7XG4gIH1cblxuICBfZGlzcGF0Y2hBc3luYyhhY3Rpb25JZCwgcHJvbWlzZSwgYXJncywgbWV0aG9kTmFtZSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5kaXNwYXRjaEFzeW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoQXN5bmMoYWN0aW9uSWQsIHByb21pc2UsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFlvdSd2ZSBhdHRlbXB0ZWQgdG8gcGVyZm9ybSB0aGUgYXN5bmNocm9ub3VzIGFjdGlvbiBgXG4gICAgICAgICsgYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSMke21ldGhvZE5hbWV9LCBidXQgaXQgaGFzbid0IGJlZW4gYWRkZWQgYFxuICAgICAgICArIGB0byBhIEZsdXggaW5zdGFuY2UuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4iXX0=