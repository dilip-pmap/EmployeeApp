'use strict';

exports.__esModule = true;
exports.simulateAction = simulateAction;
exports.simulateActionAsync = simulateActionAsync;
/**
 * Used for simulating actions on stores when testing.
 *
 */
function simulateAction(store, action, body) {
  var actionId = ensureActionId(action);
  store.handler({ actionId: actionId, body: body });
}

/**
 * Used for simulating asynchronous actions on stores when testing.
 *
 * asyncAction must be one of the following: begin, success or failure.
 *
 * When simulating the 'begin' action, all arguments after 'begin' will
 * be passed to the action handler in the store.
 *
 * @example
 *
 * TestUtils.simulateActionAsync(store, 'actionId', 'begin', 'arg1', 'arg2');
 * TestUtils.simulateActionAsync(store, 'actionId', 'success', { foo: 'bar' });
 * TestUtils.simulateActionAsync(store, 'actionId', 'failure', new Error('action failed'));
 */
function simulateActionAsync(store, action, asyncAction) {
  var actionId = ensureActionId(action);
  var payload = {
    actionId: actionId, async: asyncAction
  };

  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  switch (asyncAction) {
    case 'begin':
      if (args.length) {
        payload.actionArgs = args;
      }
      break;
    case 'success':
      payload.body = args[0];
      break;
    case 'failure':
      payload.error = args[0];
      break;
    default:
      throw new Error('asyncAction must be one of: begin, success or failure');
  }

  store.handler(payload);
}

function ensureActionId(actionOrActionId) {
  return typeof actionOrActionId === 'function' ? actionOrActionId._id : actionOrActionId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRvbnMvVGVzdFV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztRQUlnQixjQUFjLEdBQWQsY0FBYztRQW1CZCxtQkFBbUIsR0FBbkIsbUJBQW1COzs7OztBQW5CNUIsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDbEQsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLE9BQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQVIsUUFBUSxFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQ25DOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsQUFnQk0sU0FBUyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBVztBQUN2RSxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsTUFBTSxPQUFPLEdBQUc7QUFDZCxZQUFRLEVBQVIsUUFBUSxFQUFFLEtBQUssRUFBRSxXQUFXO0dBQzdCLENBQUM7O29DQUorRCxJQUFJO0FBQUosUUFBSTs7O0FBTXJFLFVBQU8sV0FBVztBQUNoQixTQUFLLE9BQU87QUFDVixVQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDZixlQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztPQUMzQjtBQUNELFlBQU07QUFBQSxBQUNSLFNBQUssU0FBUztBQUNaLGFBQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFlBQU07QUFBQSxBQUNSLFNBQUssU0FBUztBQUNaLGFBQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFlBQU07QUFBQSxBQUNSO0FBQ0UsWUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQUEsR0FDNUU7O0FBRUQsT0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN4Qjs7QUFFRCxTQUFTLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtBQUN4QyxTQUFPLE9BQU8sZ0JBQWdCLEtBQUssVUFBVSxHQUN6QyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQ3BCLGdCQUFnQixDQUFDO0NBQ3RCIiwiZmlsZSI6IlRlc3RVdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlZCBmb3Igc2ltdWxhdGluZyBhY3Rpb25zIG9uIHN0b3JlcyB3aGVuIHRlc3RpbmcuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2ltdWxhdGVBY3Rpb24oc3RvcmUsIGFjdGlvbiwgYm9keSkge1xuICBjb25zdCBhY3Rpb25JZCA9IGVuc3VyZUFjdGlvbklkKGFjdGlvbik7XG4gIHN0b3JlLmhhbmRsZXIoeyBhY3Rpb25JZCwgYm9keSB9KTtcbn1cblxuLyoqXG4gKiBVc2VkIGZvciBzaW11bGF0aW5nIGFzeW5jaHJvbm91cyBhY3Rpb25zIG9uIHN0b3JlcyB3aGVuIHRlc3RpbmcuXG4gKlxuICogYXN5bmNBY3Rpb24gbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogYmVnaW4sIHN1Y2Nlc3Mgb3IgZmFpbHVyZS5cbiAqXG4gKiBXaGVuIHNpbXVsYXRpbmcgdGhlICdiZWdpbicgYWN0aW9uLCBhbGwgYXJndW1lbnRzIGFmdGVyICdiZWdpbicgd2lsbFxuICogYmUgcGFzc2VkIHRvIHRoZSBhY3Rpb24gaGFuZGxlciBpbiB0aGUgc3RvcmUuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBUZXN0VXRpbHMuc2ltdWxhdGVBY3Rpb25Bc3luYyhzdG9yZSwgJ2FjdGlvbklkJywgJ2JlZ2luJywgJ2FyZzEnLCAnYXJnMicpO1xuICogVGVzdFV0aWxzLnNpbXVsYXRlQWN0aW9uQXN5bmMoc3RvcmUsICdhY3Rpb25JZCcsICdzdWNjZXNzJywgeyBmb286ICdiYXInIH0pO1xuICogVGVzdFV0aWxzLnNpbXVsYXRlQWN0aW9uQXN5bmMoc3RvcmUsICdhY3Rpb25JZCcsICdmYWlsdXJlJywgbmV3IEVycm9yKCdhY3Rpb24gZmFpbGVkJykpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2ltdWxhdGVBY3Rpb25Bc3luYyhzdG9yZSwgYWN0aW9uLCBhc3luY0FjdGlvbiwgLi4uYXJncykge1xuICBjb25zdCBhY3Rpb25JZCA9IGVuc3VyZUFjdGlvbklkKGFjdGlvbik7XG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgYWN0aW9uSWQsIGFzeW5jOiBhc3luY0FjdGlvblxuICB9O1xuXG4gIHN3aXRjaChhc3luY0FjdGlvbikge1xuICAgIGNhc2UgJ2JlZ2luJzpcbiAgICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBwYXlsb2FkLmFjdGlvbkFyZ3MgPSBhcmdzO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICBwYXlsb2FkLmJvZHkgPSBhcmdzWzBdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmFpbHVyZSc6XG4gICAgICBwYXlsb2FkLmVycm9yID0gYXJnc1swXTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FzeW5jQWN0aW9uIG11c3QgYmUgb25lIG9mOiBiZWdpbiwgc3VjY2VzcyBvciBmYWlsdXJlJyk7XG4gIH1cblxuICBzdG9yZS5oYW5kbGVyKHBheWxvYWQpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVBY3Rpb25JZChhY3Rpb25PckFjdGlvbklkKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uT3JBY3Rpb25JZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gYWN0aW9uT3JBY3Rpb25JZC5faWRcbiAgICA6IGFjdGlvbk9yQWN0aW9uSWQ7XG59XG4iXX0=