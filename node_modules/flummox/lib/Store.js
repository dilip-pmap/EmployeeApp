'use strict';

exports.__esModule = true;

var _eventemitter = require('eventemitter3');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Store
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Stores hold application state. They respond to actions sent by the dispatcher
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * and broadcast change events to listeners, so they can grab the latest data.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The key thing to remember is that the only way stores receive information
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * from the outside world is via the dispatcher.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Store = (function (_EventEmitter) {
  _inherits(Store, _EventEmitter);

  /**
   * Stores are initialized with a reference
   * @type {Object}
   */

  function Store() {
    _classCallCheck(this, Store);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.state = null;

    _this._handlers = {};
    _this._asyncHandlers = {};
    _this._catchAllHandlers = [];
    _this._catchAllAsyncHandlers = {
      begin: [],
      success: [],
      failure: []
    };
    return _this;
  }

  Store.prototype.setState = function setState(newState) {
    // Do a transactional state update if a function is passed
    if (typeof newState === 'function') {
      var prevState = this._isHandlingDispatch ? this._pendingState : this.state;

      newState = newState(prevState);
    }

    if (this._isHandlingDispatch) {
      this._pendingState = this._assignState(this._pendingState, newState);
      this._emitChangeAfterHandlingDispatch = true;
    } else {
      this.state = this._assignState(this.state, newState);
      this.emit('change');
    }
  };

  Store.prototype.replaceState = function replaceState(newState) {
    if (this._isHandlingDispatch) {
      this._pendingState = this._assignState(undefined, newState);
      this._emitChangeAfterHandlingDispatch = true;
    } else {
      this.state = this._assignState(undefined, newState);
      this.emit('change');
    }
  };

  Store.prototype.getStateAsObject = function getStateAsObject() {
    return this.state;
  };

  Store.assignState = function assignState(oldState, newState) {
    return (0, _objectAssign2.default)({}, oldState, newState);
  };

  Store.prototype._assignState = function _assignState() {
    return (this.constructor.assignState || Store.assignState).apply(undefined, arguments);
  };

  Store.prototype.forceUpdate = function forceUpdate() {
    if (this._isHandlingDispatch) {
      this._emitChangeAfterHandlingDispatch = true;
    } else {
      this.emit('change');
    }
  };

  Store.prototype.register = function register(actionId, handler) {
    actionId = ensureActionId(actionId);

    if (typeof handler !== 'function') return;

    this._handlers[actionId] = handler.bind(this);
  };

  Store.prototype.registerAsync = function registerAsync(actionId, beginHandler, successHandler, failureHandler) {
    actionId = ensureActionId(actionId);

    var asyncHandlers = this._bindAsyncHandlers({
      begin: beginHandler,
      success: successHandler,
      failure: failureHandler
    });

    this._asyncHandlers[actionId] = asyncHandlers;
  };

  Store.prototype.registerAll = function registerAll(handler) {
    if (typeof handler !== 'function') return;

    this._catchAllHandlers.push(handler.bind(this));
  };

  Store.prototype.registerAllAsync = function registerAllAsync(beginHandler, successHandler, failureHandler) {
    var _this2 = this;

    var asyncHandlers = this._bindAsyncHandlers({
      begin: beginHandler,
      success: successHandler,
      failure: failureHandler
    });

    Object.keys(asyncHandlers).forEach(function (key) {
      _this2._catchAllAsyncHandlers[key].push(asyncHandlers[key]);
    });
  };

  Store.prototype._bindAsyncHandlers = function _bindAsyncHandlers(asyncHandlers) {
    for (var key in asyncHandlers) {
      if (!asyncHandlers.hasOwnProperty(key)) continue;

      var handler = asyncHandlers[key];

      if (typeof handler === 'function') {
        asyncHandlers[key] = handler.bind(this);
      } else {
        delete asyncHandlers[key];
      }
    }

    return asyncHandlers;
  };

  Store.prototype.waitFor = function waitFor(tokensOrStores) {
    this._waitFor(tokensOrStores);
  };

  Store.prototype.handler = function handler(payload) {
    var body = payload.body;
    var actionId = payload.actionId;
    var _async = payload['async'];
    var actionArgs = payload.actionArgs;
    var error = payload.error;

    var _allHandlers = this._catchAllHandlers;
    var _handler = this._handlers[actionId];

    var _allAsyncHandlers = this._catchAllAsyncHandlers[_async];
    var _asyncHandler = this._asyncHandlers[actionId] && this._asyncHandlers[actionId][_async];

    if (_async) {
      var beginOrFailureHandlers = _allAsyncHandlers.concat([_asyncHandler]);

      switch (_async) {
        case 'begin':
          this._performHandler(beginOrFailureHandlers, actionArgs);
          return;
        case 'failure':
          this._performHandler(beginOrFailureHandlers, [error]);
          return;
        case 'success':
          this._performHandler(_allAsyncHandlers.concat([_asyncHandler || _handler].concat(_asyncHandler && [] || _allHandlers)), [body]);
          return;
        default:
          return;
      }
    }

    this._performHandler(_allHandlers.concat([_handler]), [body]);
  };

  Store.prototype._performHandler = function _performHandler(_handlers, args) {
    this._isHandlingDispatch = true;
    this._pendingState = this._assignState(undefined, this.state);
    this._emitChangeAfterHandlingDispatch = false;

    try {
      this._performHandlers(_handlers, args);
    } finally {
      if (this._emitChangeAfterHandlingDispatch) {
        this.state = this._pendingState;
        this.emit('change');
      }

      this._isHandlingDispatch = false;
      this._pendingState = undefined;
      this._emitChangeAfterHandlingDispatch = false;
    }
  };

  Store.prototype._performHandlers = function _performHandlers(_handlers, args) {
    var _this3 = this;

    _handlers.forEach(function (_handler) {
      return typeof _handler === 'function' && _handler.apply(_this3, args);
    });
  };

  return Store;
})(_eventemitter2.default);

exports.default = Store;

function ensureActionId(actionOrActionId) {
  return typeof actionOrActionId === 'function' ? actionOrActionId._id : actionOrActionId;
}
//# sourceMappingURL=data:application/json;base64,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QUFTO0FBQ1IsVUFBSSxJQUFJLENBQUMsZ0NBQWdDLEVBQUU7QUFDekMsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ2hDLFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDckI7O0FBRUQsVUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztBQUNqQyxVQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztBQUMvQixVQUFJLENBQUMsZ0NBQWdDLEdBQUcsS0FBSyxDQUFDO0tBQy9DO0dBQ0Y7O0FBMUxrQixPQUFLLFdBNEx4QixnQkFBZ0IsNkJBQUMsU0FBUyxFQUFFLElBQUksRUFBRTs7O0FBQ2hDLGFBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFRO2FBQ3hCLEFBQUMsT0FBTyxRQUFRLEtBQUssVUFBVSxJQUFLLFFBQVEsQ0FBQyxLQUFLLFNBQU8sSUFBSSxDQUFDO0tBQUEsQ0FBQyxDQUFDO0dBQ25FOztTQS9Ma0IsS0FBSzs7O2tCQUFMLEtBQUs7O0FBa00xQixTQUFTLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtBQUN4QyxTQUFPLE9BQU8sZ0JBQWdCLEtBQUssVUFBVSxHQUN6QyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQ3BCLGdCQUFnQixDQUFDO0NBQ3RCIiwiZmlsZSI6IlN0b3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdG9yZVxuICpcbiAqIFN0b3JlcyBob2xkIGFwcGxpY2F0aW9uIHN0YXRlLiBUaGV5IHJlc3BvbmQgdG8gYWN0aW9ucyBzZW50IGJ5IHRoZSBkaXNwYXRjaGVyXG4gKiBhbmQgYnJvYWRjYXN0IGNoYW5nZSBldmVudHMgdG8gbGlzdGVuZXJzLCBzbyB0aGV5IGNhbiBncmFiIHRoZSBsYXRlc3QgZGF0YS5cbiAqIFRoZSBrZXkgdGhpbmcgdG8gcmVtZW1iZXIgaXMgdGhhdCB0aGUgb25seSB3YXkgc3RvcmVzIHJlY2VpdmUgaW5mb3JtYXRpb25cbiAqIGZyb20gdGhlIG91dHNpZGUgd29ybGQgaXMgdmlhIHRoZSBkaXNwYXRjaGVyLlxuICovXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhcmUgaW5pdGlhbGl6ZWQgd2l0aCBhIHJlZmVyZW5jZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgdGhpcy5faGFuZGxlcnMgPSB7fTtcbiAgICB0aGlzLl9hc3luY0hhbmRsZXJzID0ge307XG4gICAgdGhpcy5fY2F0Y2hBbGxIYW5kbGVycyA9IFtdO1xuICAgIHRoaXMuX2NhdGNoQWxsQXN5bmNIYW5kbGVycyA9IHtcbiAgICAgIGJlZ2luOiBbXSxcbiAgICAgIHN1Y2Nlc3M6IFtdLFxuICAgICAgZmFpbHVyZTogW10sXG4gICAgfTtcbiAgfVxuXG4gIHNldFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgLy8gRG8gYSB0cmFuc2FjdGlvbmFsIHN0YXRlIHVwZGF0ZSBpZiBhIGZ1bmN0aW9uIGlzIHBhc3NlZFxuICAgIGlmICh0eXBlb2YgbmV3U3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IHByZXZTdGF0ZSA9IHRoaXMuX2lzSGFuZGxpbmdEaXNwYXRjaFxuICAgICAgICA/IHRoaXMuX3BlbmRpbmdTdGF0ZVxuICAgICAgICA6IHRoaXMuc3RhdGU7XG5cbiAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUocHJldlN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNIYW5kbGluZ0Rpc3BhdGNoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSB0aGlzLl9hc3NpZ25TdGF0ZSh0aGlzLl9wZW5kaW5nU3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHRoaXMuX2VtaXRDaGFuZ2VBZnRlckhhbmRsaW5nRGlzcGF0Y2ggPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5fYXNzaWduU3RhdGUodGhpcy5zdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICByZXBsYWNlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBpZiAodGhpcy5faXNIYW5kbGluZ0Rpc3BhdGNoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSB0aGlzLl9hc3NpZ25TdGF0ZSh1bmRlZmluZWQsIG5ld1N0YXRlKTtcbiAgICAgIHRoaXMuX2VtaXRDaGFuZ2VBZnRlckhhbmRsaW5nRGlzcGF0Y2ggPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5fYXNzaWduU3RhdGUodW5kZWZpbmVkLCBuZXdTdGF0ZSk7XG4gICAgICB0aGlzLmVtaXQoJ2NoYW5nZScpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXRlQXNPYmplY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gIH1cblxuICBzdGF0aWMgYXNzaWduU3RhdGUob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgcmV0dXJuIGFzc2lnbih7fSwgb2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgfVxuXG4gIF9hc3NpZ25TdGF0ZSguLi5hcmdzKXtcbiAgICByZXR1cm4gKHRoaXMuY29uc3RydWN0b3IuYXNzaWduU3RhdGUgfHwgU3RvcmUuYXNzaWduU3RhdGUpKC4uLmFyZ3MpO1xuICB9XG5cbiAgZm9yY2VVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzSGFuZGxpbmdEaXNwYXRjaCkge1xuICAgICAgdGhpcy5fZW1pdENoYW5nZUFmdGVySGFuZGxpbmdEaXNwYXRjaCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJyk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXIoYWN0aW9uSWQsIGhhbmRsZXIpIHtcbiAgICBhY3Rpb25JZCA9IGVuc3VyZUFjdGlvbklkKGFjdGlvbklkKTtcblxuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faGFuZGxlcnNbYWN0aW9uSWRdID0gaGFuZGxlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcmVnaXN0ZXJBc3luYyhhY3Rpb25JZCwgYmVnaW5IYW5kbGVyLCBzdWNjZXNzSGFuZGxlciwgZmFpbHVyZUhhbmRsZXIpIHtcbiAgICBhY3Rpb25JZCA9IGVuc3VyZUFjdGlvbklkKGFjdGlvbklkKTtcblxuICAgIGNvbnN0IGFzeW5jSGFuZGxlcnMgPSB0aGlzLl9iaW5kQXN5bmNIYW5kbGVycyh7XG4gICAgICBiZWdpbjogYmVnaW5IYW5kbGVyLFxuICAgICAgc3VjY2Vzczogc3VjY2Vzc0hhbmRsZXIsXG4gICAgICBmYWlsdXJlOiBmYWlsdXJlSGFuZGxlcixcbiAgICB9KTtcblxuICAgIHRoaXMuX2FzeW5jSGFuZGxlcnNbYWN0aW9uSWRdID0gYXN5bmNIYW5kbGVycztcbiAgfVxuXG4gIHJlZ2lzdGVyQWxsKGhhbmRsZXIpIHtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgIHRoaXMuX2NhdGNoQWxsSGFuZGxlcnMucHVzaChoYW5kbGVyLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcmVnaXN0ZXJBbGxBc3luYyhiZWdpbkhhbmRsZXIsIHN1Y2Nlc3NIYW5kbGVyLCBmYWlsdXJlSGFuZGxlcikge1xuICAgIGNvbnN0IGFzeW5jSGFuZGxlcnMgPSB0aGlzLl9iaW5kQXN5bmNIYW5kbGVycyh7XG4gICAgICBiZWdpbjogYmVnaW5IYW5kbGVyLFxuICAgICAgc3VjY2Vzczogc3VjY2Vzc0hhbmRsZXIsXG4gICAgICBmYWlsdXJlOiBmYWlsdXJlSGFuZGxlcixcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGFzeW5jSGFuZGxlcnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy5fY2F0Y2hBbGxBc3luY0hhbmRsZXJzW2tleV0ucHVzaChcbiAgICAgICAgYXN5bmNIYW5kbGVyc1trZXldXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgX2JpbmRBc3luY0hhbmRsZXJzKGFzeW5jSGFuZGxlcnMpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXN5bmNIYW5kbGVycykge1xuICAgICAgaWYgKCFhc3luY0hhbmRsZXJzLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xuXG4gICAgICBjb25zdCBoYW5kbGVyID0gYXN5bmNIYW5kbGVyc1trZXldO1xuXG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYXN5bmNIYW5kbGVyc1trZXldID0gaGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGFzeW5jSGFuZGxlcnNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXN5bmNIYW5kbGVycztcbiAgfVxuXG4gIHdhaXRGb3IodG9rZW5zT3JTdG9yZXMpIHtcbiAgICB0aGlzLl93YWl0Rm9yKHRva2Vuc09yU3RvcmVzKTtcbiAgfVxuXG4gIGhhbmRsZXIocGF5bG9hZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGJvZHksXG4gICAgICBhY3Rpb25JZCxcbiAgICAgICdhc3luYyc6IF9hc3luYyxcbiAgICAgIGFjdGlvbkFyZ3MsXG4gICAgICBlcnJvclxuICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgY29uc3QgX2FsbEhhbmRsZXJzID0gdGhpcy5fY2F0Y2hBbGxIYW5kbGVycztcbiAgICBjb25zdCBfaGFuZGxlciA9IHRoaXMuX2hhbmRsZXJzW2FjdGlvbklkXTtcblxuICAgIGNvbnN0IF9hbGxBc3luY0hhbmRsZXJzID0gdGhpcy5fY2F0Y2hBbGxBc3luY0hhbmRsZXJzW19hc3luY107XG4gICAgY29uc3QgX2FzeW5jSGFuZGxlciA9IHRoaXMuX2FzeW5jSGFuZGxlcnNbYWN0aW9uSWRdXG4gICAgICAmJiB0aGlzLl9hc3luY0hhbmRsZXJzW2FjdGlvbklkXVtfYXN5bmNdO1xuXG4gICAgaWYgKF9hc3luYykge1xuICAgICAgbGV0IGJlZ2luT3JGYWlsdXJlSGFuZGxlcnMgPSBfYWxsQXN5bmNIYW5kbGVycy5jb25jYXQoW19hc3luY0hhbmRsZXJdKTtcblxuICAgICAgc3dpdGNoIChfYXN5bmMpIHtcbiAgICAgICAgY2FzZSAnYmVnaW4nOlxuICAgICAgICAgIHRoaXMuX3BlcmZvcm1IYW5kbGVyKGJlZ2luT3JGYWlsdXJlSGFuZGxlcnMsIGFjdGlvbkFyZ3MpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSAnZmFpbHVyZSc6XG4gICAgICAgICAgdGhpcy5fcGVyZm9ybUhhbmRsZXIoYmVnaW5PckZhaWx1cmVIYW5kbGVycywgW2Vycm9yXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgICB0aGlzLl9wZXJmb3JtSGFuZGxlcihfYWxsQXN5bmNIYW5kbGVycy5jb25jYXQoW1xuICAgICAgICAgICAgKF9hc3luY0hhbmRsZXIgfHwgX2hhbmRsZXIpXG4gICAgICAgICAgXS5jb25jYXQoX2FzeW5jSGFuZGxlciAmJiBbXSB8fCBfYWxsSGFuZGxlcnMpKSwgW2JvZHldKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3BlcmZvcm1IYW5kbGVyKF9hbGxIYW5kbGVycy5jb25jYXQoW19oYW5kbGVyXSksIFtib2R5XSk7XG4gIH1cblxuICBfcGVyZm9ybUhhbmRsZXIoX2hhbmRsZXJzLCBhcmdzKSB7XG4gICAgdGhpcy5faXNIYW5kbGluZ0Rpc3BhdGNoID0gdHJ1ZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSB0aGlzLl9hc3NpZ25TdGF0ZSh1bmRlZmluZWQsIHRoaXMuc3RhdGUpO1xuICAgIHRoaXMuX2VtaXRDaGFuZ2VBZnRlckhhbmRsaW5nRGlzcGF0Y2ggPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9wZXJmb3JtSGFuZGxlcnMoX2hhbmRsZXJzLCBhcmdzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKHRoaXMuX2VtaXRDaGFuZ2VBZnRlckhhbmRsaW5nRGlzcGF0Y2gpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuX3BlbmRpbmdTdGF0ZTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNIYW5kbGluZ0Rpc3BhdGNoID0gZmFsc2U7XG4gICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9lbWl0Q2hhbmdlQWZ0ZXJIYW5kbGluZ0Rpc3BhdGNoID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgX3BlcmZvcm1IYW5kbGVycyhfaGFuZGxlcnMsIGFyZ3MpIHtcbiAgICBfaGFuZGxlcnMuZm9yRWFjaChfaGFuZGxlciA9PlxuICAgICAgKHR5cGVvZiBfaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykgJiYgX2hhbmRsZXIuYXBwbHkodGhpcywgYXJncykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUFjdGlvbklkKGFjdGlvbk9yQWN0aW9uSWQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhY3Rpb25PckFjdGlvbklkID09PSAnZnVuY3Rpb24nXG4gICAgPyBhY3Rpb25PckFjdGlvbklkLl9pZFxuICAgIDogYWN0aW9uT3JBY3Rpb25JZDtcbn1cbiJdfQ==